![](https://upload-images.jianshu.io/upload_images/22877992-5f5c86c20445f86c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
# 1.简历的准备
在面试中，我发现很多人都不能写好一份求职简历，所以我们首先谈谈如何写一份针对互联网公司的求职简历。

## 1.简洁的艺术

互联网公司和传统企业有着很大的区别，通常情况下，创新和效率是互联网公司比较追求的公司文化，所以体现在简历上，就是超过一页的简历通常会被认为不够专业。

更麻烦的是，多数超过一页的简历很可能在 HR 手中就被过滤掉了。因为 HR 每天会收到大量的简历，一般情况下每份简历在手中的停留时间也就 10 秒钟左右。而超过一页的简历会需要更多的时间去寻找简历中的有价值部分，对于 HR 来说，她更倾向于认为这种人通常是不靠谱的，因为写个简历都不懂行规，为什么还要给他面试机会呢?

那么我们应该如何精简简历呢? 简单说来就是一个字：删！

**删掉不必要的自我介绍信息**。很多求职者会将自己在学校所学的课程罗列上去，例如：C 语言，数据结构，数学分析⋯⋯好家伙，一写就是几十门，还放在简历的最上面，就怕面试官看不见。对于这类信息，一个字：删！面试官不关心你上了哪些课程，而且在全中国，大家上的课程也都大同小异，所以没必要写出来。

**删除不必要的工作或实习、实践经历**。如果你找一份程序员的工作，那么你参加了奥运会的志愿者活动，并且拿到了奖励或者你参加学校的辩论队，获得了最佳辩手这些经历通常是不相关的。诸如此类的还有你帮导师代课，讲了和工作不相关的某某专业课，或者你在学生会工作等等。删除不相关的工作、实习或实践内容可以保证你的简历干净。当然，如果你实在没得可写，比如你是应届生，一点实习经历都没有，那可以适当写一两条，保证你能写够一页的简历，但是那两条也要注意是强调你的团队合作能力或者执行力之类的技能，因为这些才是面试官感兴趣的。

**删除不必要的证书**。最多写个 4、6 级的证书，什么教师资格证，中高级程序员证，还有国内的各种什么认证，都是没有人关心的。

**删除不必要的细节**。作为 iOS 开发的面试官，很多求职者在介绍自己的 iOS 项目经历的时候，介绍了这个工程用的工作环境是 Mac OS，使用的机器是 Mac Mini，编译器是 Xcode，能够运行在 iOS 什么版本的环境。还有一些人，把这个项目用到的开源库都写上啦，什么 AFNetworking, CocoaPods 啥的。这些其实都不是重点，请删掉。后面我会讲，你应该如何介绍你的 iOS 项目经历。

自我评价，这个部分是应届生最喜欢写的，各种有没有的优点都写上，例如：

> 性格开朗、稳重、有活力，待人热情、真诚；工作认真负责，积极主动，能吃苦耐劳，勇于承受压力，勇于创新；有很强的组织能力和团队协作精神，具有较强的适应能力；纪律性强，工作积极配合；意志坚强，具有较强的无私奉献精神。对待工作认真负责，善于沟通、协调有较强的组织能力与团队精神；活泼开朗、乐观上进、有爱心并善于施教并行；上进心强、勤于学习能不断提高自身的能力与综合素质。

这些内容在面试的时候不太好考查，都可以删掉。通常如果有 HR 面的话，HR 自然会考查一些你的沟通，抗压，性格等软实力。

我相信，不管你是刚毕业的学生，还是工作十年的老手，你都可以把你的简历精简到一页 A4 纸上。记住，简洁是一种美，一种效率，也是一种艺术。

## 2.重要的信息写在最前面

将你觉得最吸引人的地方写在最前面。如果你有牛逼公司的实习，那就把实习经历写在最前面，如果你在一个牛逼的实验室里面做科研，就把研究成果和论文写出来，如果你有获得过比较牛逼的比赛名次（例如 Google code jam, ACM 比赛之类），写上绝对吸引眼球。

所以，每个人的简历的介绍顺序应该都是不一样的，不要在网上下载一个模板，然后就一项一项地填：教育经历，实习经历，得奖经历，个人爱好，这样的简历毫无吸引力，也无法突出你的特点。

除了你的个人特点是重要信息外，你的手机号、邮箱、毕业院校、专业以及毕业时间这些也都是非常重要的，一定要写在简历最上面。

## 3.不要简单地罗列工作经历

不要简单地说你开发了某某 iOS 客户端。这样简单的罗列你的作品集并不能让面试官很好地了解你的能力，当然，真正在面试时面试官可能会仔细询问，但是一份好的简历，应该省去一些面试官额外询问你的工作细节的时间。

具体的做法是：详细的描述你对于某某 iOS 客户端的贡献。主要包括：你参与了多少比例功能的开发? 你解决了哪些开发中的有挑战的问题? 你是不是技术负责人?

而且，通过你反思这些贡献，你也可以达到自我审视，如果你发现这个项目你根本什么有价值的贡献都没做，就打了打酱油，那你最好不要写在简历上，否则当面试官在面试时问起时，你会很难回答，最终让他发现你的这个项目经历根本一文不值时，肯定会给一个负面的印象。

## 4.不要写任何虚假或夸大的信息

刚刚毕业的学生都喜欢写精通 Java，精通 C/C++，其实代码可能写了不到 1 万行。我觉得你要精通某个语言，至少得写 50 万行这个语言的代码才行，而且要对语言的各种内部机制和原理有了解。那些宣称精通 Java 的同学，连 Java 如何做内存回收，如何做泛型支持，如何做自动 boxing 和 unboxing 的都不知道，真不知道为什么要写精通二字。

任何夸大或虚假的信息，在面试时被发现，会造成极差的面试印象。所以你如果对某个知识一知半解，要么就写 “使用过” 某某，要么就干脆不写。如果你简历实在太单薄，没办法写上了一些自己打酱油的项目，被问起来怎么办? 请看看下面的故事：

> 我面试过一个同学，他在面试时非常诚实。我问他一些简历上的东西，他如果不会，就会老实说，这个我只是使用了一下，确实不清楚细节。对于一些没有技术含量的项目，他也会老实说，这个项目他做的工作比较少，主要是别人在做。最后他还会补充说，“我自认为自己数据结构和算法还不错，要不你问我这方面的知识吧。”

这倒是一个不错的办法，对于一个没有项目经验，但是聪明并且数据结构和算法基础知识扎实的应届生，其实我们是非常愿意培养的。很多人以为公司面试是看经验，希望招进来就能干活，其实不是的，至少我们现在以及我以前在网易招人，面试的是对方的潜力，潜力越大，可塑性好，未来进步得也更快；一些资质平庸，却经验稍微丰富一点的开发者，相比聪明好学的面试者，后劲是不足的。

总之，不要写任何虚假或夸大的信息，即使你最终骗得过面试官，进了某公司，如果能力不够，在最初的试用期内，也很可能因为能力不足而被开掉。

## 5.留下更多信息

刚刚说到，简历最好写够一张 A4 纸即可，那么你如果想留下更多可供面试官参考的信息怎么办呢？其实你可以附上更多的参考链接，这样如果面试官对你感兴趣，自然会仔细去查阅这些链接。对于 iOS 面试来说，GitHub 上面的开源项目地址、博客地址都是不错的参考信息。如果你在微博上也频繁讨论技术，也可以附上微博地址。

我特别建议大家如果有精力，可以好好维护一下自己的博客或者 GitHub 上的开源代码。因为如果你打算把这些写到简历上，让面试官去上面仔细评价你的水平，你就应该对上面的内容做到足够认真的准备。否则，本来面试完面试官还挺感兴趣的，结果一看你的博客和开源代码，评价立刻降低，就得不偿失了。

## 6.不要附加任何可能带来负面印象的信息

任何与招聘工作无关的东西，尽量不要提。有些信息提了可能有加分，也可能有减分，取决于具体的面试官。下面我罗列一下我认为是减分的信息。

### 1）个人照片

不要在简历中附加个人照片。个人长相属于与工作能力不相关的信息，也许你觉得你长得很帅，那你怎么知道你的样子不和面试官的情敌长得一样? 也许你长得很漂亮，那么你怎么知道 HR 是否被你长得一样的小三把男朋友抢了? 我说得有点极端，那人们对于长相的评价标准确实千差万别，萝卜青菜各有所爱，加上可能有一些潜在的极端情况，所以没必要附加这部分信息。这属于加了可能有加分，也可能有减分的情况。

### 2）有风险的爱好

不要写各种奇怪的爱好。喜欢打游戏、抽烟、喝酒，这类可能带来负面印象的爱好最好不要写。的确有些公司会有这种一起联机玩游戏或者喝酒的文化，不过除非你明确清楚对于目标公司，写上会是加分项，否则还是不写为妙。

### 3）使用 PDF 格式

不要使用 Word 格式的简历，要使用 PDF 的格式。我在招 iOS 程序员时，好多人的简历都是 Word 格式的，我都怀疑这些人是否有 Mac 电脑。因为 Mac 下的 office 那么难用，公司好多人机器上都没有 Mac 版 office。我真怀疑这些人真是的想投简历么? PDF 格式的简历通常能展现出简历的专业性。

### 4）QQ号码邮箱

不要使用 QQ 号开头的 QQ 邮箱，例如 `12345@qq.com` ，邮箱的事情我之前简单说过，有些人很在乎这个，有些人觉得无所谓，我个人对用数字开头的 QQ 邮箱的求职者不会有加分，但是对使用 Gmail 邮箱的求职者有加分。因为这涉及到个人的工作效率，使用 Gmail 的人通常会使用邮件组，过滤器，IMAP 协议，标签，这些都有助于提高工作效率。如果你非要使用 QQ 邮箱，也应该申请一个有意义的邮箱名，例如 `tangqiaoboy@qq.com` 。

## 7.职业培训信息

不要写参加过某某培训公司的 iOS 培训，特别是那种一、两个月的速成培训。这对于我和身边很多面试官来说，绝对是负分。

这个道理似乎有点奇怪，因为我们从小都是由老师教授新知识的。我自己也实验过，掌握同样的高中课本上的知识，自己自学的速度通常比老师讲授的速度要慢一倍的时间。即一个知识点，如果你自己要看 2 小时的书才能理解的话，有好的老师给你讲解的话，只需要一个小时就够了。所以，我一直希望在学习各种东西的时候都能去听一些课程，因为我认为这样节省了我学习的时间。

但是这个道理在程序员这个领域行不通，为什么这么说呢？原因有两点：

1.  计算机编程相关的知识更新速度很快。同时，国内的 IT 类资料的翻译质量相当差，原创的优秀书籍也很少。所以，我们通常需要靠阅读英文才能掌握最新的资料。拿 iOS 来说，每年 WWDC 的资料都非常重要，而这些内容涉及版权，国内培训机构很难快速整理成教材。

2.  计算机编程知识需要较多的专业知识积累和实践。学校的老师更多只能做入门性的教学工作。

    如果一个培训机构有一个老师，他强到能够通过自己做一些项目来积累很多专业知识和实践，并且不断地从国外资料上学习最新的技术。那么这个人在企业里面会比在国内的培训机构更有施展自己能力的空间。国内的培训机构因为受众面的原因，基本上还是培养那种初级的程序员新手，所以对老师的新技术学习速度要求不会那么高，自然老师也不会花那么时间在新技术研究上。但是企业就不一样了，企业需要不停地利用新技术来增强自己的产品竞争力，所以对于 IT 企业来说，产品的竞争就是人才的竞争，所以给优秀的人能够开出很高的薪水。

    所以，我们不能期望从 IT 类培训机构中学习到最新的技术，一切只能通过我们自学。当然，自学之后在同行之间相互交流，对于我们的技术成长也是很有用的。

    ## 小结

    ![](https://upload-images.jianshu.io/upload_images/22877992-524b32eb9200dc94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

上图是本节讨论的总结，在简历准备上，我们需要考虑简历的简洁性等各种注意事项。

# 2.寻找机会
1.寻找内推机会
其实，最好的面试机会都不是公开渠道的。好的机会都隐藏于各种内部推荐之中。通过内部推荐，你可以更加了解目标工作的团队和内容，另外内部推荐通常也可以跳过简历筛选环节，直接参加笔试或面试。我所在的猿辅导公司为内推设立了非常高的奖金激励，因为我们发现，综合各种渠道来看，内推的渠道的人才的简历质量最高，面试通过率最高的。

所以，如果你是学生，找找你在各大公司的师兄师姐内推；如果你已经工作了，你可以找前同事或者通过一些社交活动认识的技术同行内推。

大部分情况下，如果在目标公司你完全没有认识的人，你也可以找机会来认识几个。比如你可以通过微博、知乎、Twitter、GitHub 来结交新的朋友。然后双方聊天如果愉快的话，我相信内推这种举手之劳的事情对方不会拒绝的。

如果你都工作 5 年以上，还是没有建立足够好的社交圈子帮助你内推，那可能你需要做很多的社交活动交一些朋友。

2.其它常见的渠道
内推之外，其它的公开招聘渠道通常都要差一些。现在也有一些专门针对互联网行业的招聘网站，例如拉勾、100offer 这类，它们也是不错的渠道，可以找到相关的招聘信息。

但因为这类公开渠道简历投放数量巨大，通常 HR 那边就会比较严格地筛选简历，拿我们公司来说，通常在这些渠道看 20 份简历，才会有 1 份愿意约面的简历。而且 HR 会只挑比较好的学校或者公司的候选人，也不排除还有例如笔试这种更多的面试流程。但是面试经验都是慢慢积累的，建议你也可以尝试这些渠道。

# 3.面试流程
## 1.流程简述

就我所知，大部分的 iOS 公司的面试流程都大同小异。我们先简述一下大体的流程，然后再详细讨论。

在面试的刚开始，面试官通常会要求你做一个简短的自我介绍。然后面试官可能会和你聊聊你过去的实习项目或者工作内容。接着面试官可能会问你一些具体的技术问题，有经验的面试官会尽量找一些和你过去工作相关的技术问题。最后，有些公司会选择让你当场写写代码，Facebook 会让你在白板上写代码，国内的更多是让你在 A4 纸上写。有一些公司也会问一些系统设计方面的问题，考查你的整体架构能力。在面试快要结束时，通常面试官还会问你有没有别的什么问题。

以上这些流程，不同公司可能会跳过某些环节。比如有一些公司就不会考察当场在白板或 A4 纸上写代码。有些公司可能跳过问简历的环节直接写代码，特别是校园招聘的时候，因为应届生通常项目经验较少。面试流程图如下所示：

![面试流程图](https://upload-images.jianshu.io/upload_images/22877992-d2ed6a806ceaa66a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

## 2.自我介绍

自我介绍通常是面试中最简单、最好准备的环节。

一个好的自我介绍应该结合公司的招聘职位来做定制。比如公司有硬件的背景，就应该介绍一下在硬件上的经验或者兴趣；公司如果注重算法能力，则介绍自己的算法练习；公司如果注重团队合作，那么你介绍一下自己的社会活动都是可以的。

一个好的自我介绍应该提前写下来，并且背熟。因为候选人通常的紧张感都是来自于面试刚开始的几分钟，如果你刚开始的几分钟讲的结结巴巴，那么这种负面情绪会加剧你面试时的紧张感，从而影响你正常发挥。如果你提前把自我介绍准备得特别流利，那么开始几分钟的紧张感过去之后，你很可能就会很快进入状态，而忘记紧张这个事情了。

即使做到了以上这些仍然是不够的，候选者常见的问题还包括：

*   太简短
*   没有重点
*   太拖沓
*   不熟练

我们在展开讨论上面这些问题之前，我们可以站在面试官的立场考虑一下：如果你是面试官，你为什么要让候选人做自我介绍？你希望在自我介绍环节考察哪些信息？

在我看来，自我介绍环节相当重要，因为：

*   首先它考察了候选人的表达能力。大部分的程序员表达能力可能都一般，但是如果连自我介绍都说不清楚，通常就说明表达沟通能力稍微有点问题了。面试官通过这个环节可以初步考察到候选人的表达能力。
*   它同样也考察了候选人对于面试的重视程度。一般情况下，表达再差的程序员，也可以通过事先拟稿的方式，把自我介绍内容背下来。如果一个人自我介绍太差，说明他不但表达差，而且不重视这次面试。
*   最后，自我介绍对之后的面试环节起到了支撑作用。因为自我介绍中通常会涉及自己的项目经历，自己擅长的技术等。这些都很可能吸引面试官追问下去。好的候选人会通过自我介绍 “引导” 面试官问到自己擅长的领域知识。如果面试官最后对问题答案很满意，通过面试的几率就会大大增加。

所以我如果是面试官，我希望能得到一个清晰流畅的自我介绍。下面我们来看看候选人在面试中的常见问题。

### 1）太简短

一个好的自我介绍大概是 3～5 分钟。过短的自我介绍没法让面试官了解你的大致情况，也不足以看出来你的基本表达能力。

如果你发现自己没法说出足够时间的自我介绍。可以考虑在介绍中加入：自己的简单的求学经历，项目经历，项目中有亮点的地方，参与或研究过的一些开源项目，写过的博客，其它兴趣爱好，自己对新工作的期望和目标公司的理解。

我相信每个人经过准备，都可以做到一个 5 分钟长度的自我介绍。

### 2）没有重点

突破了时间的问题，接下来就需要掌握介绍的重点。通常一个技术面试，技术相关的介绍才是重点。所以求学经历，兴趣爱好之类的内容可以简单提到即可。

对于一个工作过的开发者，你过去做的项目哪个最有挑战，最能展示出你的水平其实自己应该是最清楚的。所以大家可以花时间把这个内容稍微强调一下。

当然你也没必要介绍得太细致，面试官如果感兴趣，自然会在之后的面试过程中和你讨论。

### 3）太拖沓

有些工作了几年的人，做过的项目差不多有个 3～5 个，面试的时候就忍不住一个一个说。单不说这么多项目在自我介绍环节不够介绍。就是之后的详细讨论环节，面试官也不可能讨论完你的所有项目经历。

所以千万不要做这种 “罗列经历” 的事情，你要做的就是挑一个或者最多两个项目，介绍一下项目大致的背景和你解决的主要问题即可。至于具体的解决过程，可以不必介绍。

### 4）不熟练

即便你的内容完全合适，时间长度完全合理，你也需要保证一个流利的陈述过程。适当在面试前多排练几次，所有人都可以做到一个流利的自我介绍。

还有一点非常神奇，就是一个人在做一件事情的时候，通常都是开始的前以及刚开始几分钟特别紧张。比如考试，演讲或者面试，通常这几分钟之后，人们进入 “状态” 了，就会忘记紧张了。

将自己的自我介绍背下来，可以保证一个流利顺畅的面试开局，这可以极大舒缓候选人的紧张情绪。相反，一开始自我介绍就结结巴巴，会加剧候选人的紧张情绪，而技术面试如果不能冷静的话，是很难在写代码环节保证逻辑清晰正确的。

所以，请大家务必把这个小环节重视起来，做出一个完美的开局。

## 3.项目介绍

自我介绍之后，就轮到讨论更加具体的内容环节了，通常面试官都会根据自我介绍或者你的简历，选一个他感兴趣的项目来详细讨论。

这个时候，大家务必需要提前整理出自己参与的项目的具体挑战，以及自己做得比较好的地方。切忌不要说：“这个项目很简单，没什么挑战，那个项目也很简单，没什么好说的”。再简单的事情，都可以做到极致的，就看你有没有一个追求完美的心。

比如你的项目可能在你看来就是摆放几个 iOS 控件。但是，这些控件各自有什么使用上的技巧，有什么优化技巧？其实如果专心研究，还是有很多可以学习的。拿 UITableView 来说，一个人如果能够做到把它的滑动流程度优化好，是非常不容易的。这里面涉及网络资源的异步加载、图片资源的缓存、后台线程的渲染、CALayer 层的优化等等。

这其实也要求我们做工作要精益求精，不求甚解。所以一场成功的面试最最本质上，看得还是自己平时的积累。如果自己平时只是糊弄工作，那么面试时就很容易被看穿。

在这一点上，我奉劝大家在自己的简历上一定要老实。不要在建简历上弄虚作假，把自己没有做过的项目写在里面。

顺便我在这里也教一下大家如何面试别人。如果你是面试官，考察简历的真假最简单的方法就是问细节。一个项目的细节如果问得很深入，候选人有没有做过很容易可以看出来。

举个例子，如果候选人说他在某公司就职期间做了某某项目。你就可以问他：

*   这个工作具体的产品需求是什么样的？
*   大概做了多长时间？
*   整体的软件架构是什么样的？
*   涉及哪些人合作？几个开发和测试？
*   项目的时间排期是怎么定的？
*   你主要负责的部分和合作的人？
*   项目进行中有没有遇到什么问题？
*   这个项目最后最大的收获是什么？遗憾是什么？
*   项目最困难的一个需求是什么？具体什么实现的？

面试官如果做过类似项目，还可以问问通常这个项目常见的坑，看看候选人是什么解决的。

## 4.写代码

编程能力，说到底还是一个实践的能力，所以说大部分公司都会考察当场写代码。我面试过上百人，见到过很多候选人在自我介绍和项目讨论时都滔滔不绝，侃侃而谈，感觉非常好。但是一到写代码环节就怂了，要么写出来各种逻辑问题和细节问题没处理好，要么就是根本写不出来。

由于人最终招进来就是干活写代码的，所以如果候选人当场写代码表现很差的话，基本上面试就挂掉了。

程序员这个行业，说到底就是一个翻译的工作，把产品经理的产品文档和设计师的 UI 设计，翻译成计算机能够理解的形式，这个形式通常就是一行一行的源码。

当面试官考察你写代码的时候，他其实在考察：

*   你对语言的熟悉程度。如果候选人连常见的变量定义和系统函数都不熟悉，说明他肯定经验还是非常欠缺。
*   你对逻辑的处理能力。产品经理关注的是用户场景和核心需求，而程序员关注的是逻辑边界和异常情况。程序的 bug 往往就是边界和特殊情况没有处理好。虽然说写出没有 bug 的程序几乎不可能，但是逻辑清晰的程序员能够把思路理清楚，减少 bug 发生的概率。
*   设计和架构能力。好的代码需要保证易于维护和修改。这里面涉及很多知识，从简单的 “单一职责” 原则，到复杂的 “好的组合优于继承” 原则，其中设计模式相关的知识最多。写代码的时候多少还是能够看出这方面的能力。另外有些公司，例如 Facebook，会有专门的系统设计（System Design）面试环节，专注于考察设计能力。

## 5.系统设计

有一些公司喜欢考查一些系统设计的问题，简单来说，就是让你解决一个具体的业务需求，看看你是否能够将业务逻辑梳理清楚，并且拆解成各个模块，设计好模块间的关系。举几个例子，面试官可能让你：

*   设计一个类似微博的信息流应用。
*   设计一个本地数据缓存架构。
*   设计一个埋点分析系统。
*   设计一个直播答题系统。
*   设计一个多端的数据同步系统。
*   设计一个动态补丁的方案。

这些系统的设计都非常考查一个人知识的全面性。通常情况下，如果一个人只知道 iOS 开发的知识，是很难做出相关的设计的。为了能够解决这些系统设计题，我们首先需要有足够的知识面，适度了解一下 Android 端、Web 端以及服务器端的各种技术方案背后的原理。你可以不写别的平台的代码，但是一定要理解它们在技术上能做到什么，不能做到什么。你也不必过于担心，面试官在考查的时候，还是会重点考查 iOS 相关的部分。

我们将在下一小节，展开讨论如何准备和回答系统设计题。

## 6.提问

提问环节通常在面试结束前，取决于前面的部分是否按时结束，有些时候前面的环节占用了太多时间，也可能没有提问环节了。在后面的章节，我们会展开讨论一下如何提问。
# 资料推荐

如果你正在跳槽或者正准备跳槽不妨动动小手，添加一下咱们的交流群[**101 295 1431**](https://links.jianshu.com/go?to=https%3A%2F%2Fjq.qq.com%2F%3F_wv%3D1027%26k%3D5JFjujE)来获取一份详细的大厂面试资料为你的跳槽多添一份保障。

![](https://upload-images.jianshu.io/upload_images/22877992-0bfc037cc50cae7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

